#    and best practices on handling the access key credentials.

on:
  push:
    branches:
      - master

name: Push to Amazon ECR

jobs:
  build:

    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run:
          mvn clean package --file pom.xml

      - uses: actions/checkout@v1

      - run: mkdir -p target/

      - run: echo hello > target/poc_gh_actions-0.0.1-SNAPSHOT.jar

      - uses: actions/upload-artifact@v1
        with:
          name: file1
          path: target/

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest
    environment: staging
    env:
      AWS_REGION: us-east-2
      ECS_SERVICE: test-service                 # set this to your Amazon ECS service name
      ECS_CLUSTER: test-cluster                 # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: test-task-def # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
      CONTAINER_NAME: test-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
    steps:
      - name: Checkout
        uses: actions/checkout@v1


      - uses: actions/checkout@v1

      - uses: actions/download-artifact@v1
        with:
          name: file1
          path: target/

      - run: cat target/poc_gh_actions-0.0.1-SNAPSHOT.jar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: test_regisry
          IMAGE_TAG:  latest_poc1
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
